parameters:
  - name: Artifacts
    type: object
    default: []
  - name: ServiceDirectory
    type: string
    default: not-specified
  - name: TestPipeline
    type: boolean
    default: false
  - name: CoverageEnabled
    type: boolean
    default: true
  - name: CtestRegex
    type: string
    default: .*
  - name: BuildReleaseArtifacts
    type: boolean
    default: true
  - name: CoverageReportPath
    type: string
    default: 'sdk/*/*/*cov_xml.xml'
  - name: Matrix
    type: object
    default:
      Ubuntu18_1:
        Pool: azsdk-pool-mms-ubuntu-1804-general
        OSVmImage: MMSUbuntu18.04
        AptDependencies: g++-5
        VcpkgInstall: 'curl[ssl] libxml2 openssl'
        VCPKG_DEFAULT_TRIPLET: 'x64-linux'
        # Can't set CC and CXX to env because it would affect VCPKG building which requires g++ > 7
        # So, this conf will set the CXX for cmake inline.
        CmakeEnvArg: 'CC=/usr/bin/gcc-5 CXX=/usr/bin/g++-5 cmake'
        BuildArgs: '-j 4'
      Ubuntu18_2:
        Pool: azsdk-pool-mms-ubuntu-1804-general
        OSVmImage: MMSUbuntu18.04
        AptDependencies: g++-8
        VcpkgInstall: 'curl[ssl] libxml2 openssl'
        VCPKG_DEFAULT_TRIPLET: 'x64-linux'
        CC: '/usr/bin/gcc-8'
        CXX: '/usr/bin/g++-8'
        BuildArgs: '-j 10'
      Ubuntu18_3:
        Pool: azsdk-pool-mms-ubuntu-1804-general
        OSVmImage: MMSUbuntu18.04
        VcpkgInstall: 'curl[ssl] libxml2 openssl'
        VCPKG_DEFAULT_TRIPLET: 'x64-linux'
        CC: '/usr/bin/gcc-9'
        CXX: '/usr/bin/g++-9'
        BuildArgs: '-j 10'
      Ubuntu18_4:
        Pool: azsdk-pool-mms-ubuntu-1804-general
        OSVmImage: MMSUbuntu18.04
        VcpkgInstall: 'curl[ssl] libxml2 openssl'
        VCPKG_DEFAULT_TRIPLET: 'x64-linux'
        CmakeArgs: ' -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=ON -DBUILD_PERFORMANCE_TESTS=ON -DRUN_LONG_UNIT_TESTS=ON'
        BuildArgs: '-j 10'

      Ubuntu18_5:
        Pool: azsdk-pool-mms-ubuntu-1804-general
        OSVmImage: MMSUbuntu18.04
        VcpkgInstall: 'curl[ssl] libxml2 openssl'
        VCPKG_DEFAULT_TRIPLET: 'x64-linux'
        BuildArgs: '-j 10'
      Ubuntu18_6:
        Pool: azsdk-pool-mms-ubuntu-1804-general
        OSVmImage: MMSUbuntu18.04
        VcpkgInstall: 'curl[ssl] libxml2 openssl'
        AptDependencies: 'gcovr lcov'
        VCPKG_DEFAULT_TRIPLET: 'x64-linux'
        CmakeArgs: ' -DBUILD_TESTING=ON -DBUILD_PERFORMANCE_TESTS=ON -DRUN_LONG_UNIT_TESTS=ON -DCMAKE_BUILD_TYPE=Debug -DBUILD_CODE_COVERAGE=ON -DCMAKE_VERBOSE_MAKEFILE=ON'
        # Make coverage report to avoid running the test exe because CI step will run it
        CODE_COVERAGE_COLLECT_ONLY: 1
        CODE_COVERAGE: enabled
        BuildArgs: '-j 10'

      Ubuntu20_1:
        Pool: azsdk-pool-mms-ubuntu-2004-general
        OSVmImage: MMSUbuntu20.04
        VcpkgInstall: 'curl[ssl] libxml2 openssl'
        AptDependencies: 'clang-11'
        VCPKG_DEFAULT_TRIPLET: 'x64-linux'
        CHECK_CLANG_FORMAT: 1
        CC: '/usr/bin/clang-11'
        CXX: '/usr/bin/clang++-11'
        BuildArgs: '-j 4'
      Ubuntu20_2:
        Pool: azsdk-pool-mms-ubuntu-2004-general
        OSVmImage: MMSUbuntu20.04
        VcpkgInstall: 'curl[ssl] libxml2 openssl'
        VCPKG_DEFAULT_TRIPLET: 'x64-linux'
        CMAKE_BUILD_TYPE: Release
        CmakeArgs: ' -DBUILD_TESTING=ON -DBUILD_PERFORMANCE_TESTS=ON -DRUN_LONG_UNIT_TESTS=ON'
        BuildArgs: '-j 10'

      Windows_1:
        Pool: azsdk-pool-mms-win-2019-general
        OSVmImage: MMS2019
        VcpkgInstall: 'curl[winssl]'
        VCPKG_DEFAULT_TRIPLET: 'x86-windows-static'
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: Win32
        CmakeArgs: ' -DBUILD_TRANSPORT_CURL=ON' #Leaving curl on here to explicitly test what the default behavior is on windows.
        BuildArgs: '--parallel 8'
      Windows_2:
        Pool: azsdk-pool-mms-win-2019-general
        OSVmImage: MMS2019
        VcpkgInstall: 'curl[winssl]'
        VCPKG_DEFAULT_TRIPLET: 'x86-windows-static'
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: Win32
        CMAKE_BUILD_TYPE: Release
        CmakeArgs: ' -DBUILD_TRANSPORT_CURL=ON' #Leaving curl on here to explicitly test what the default behavior is on windows.
        BuildArgs: '--parallel 8'
      Windows_3:
        Pool: azsdk-pool-mms-win-2019-general
        OSVmImage: MMS2019
        VcpkgInstall: 'curl[winssl]'
        VCPKG_DEFAULT_TRIPLET: 'x64-windows-static'
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: x64
        BuildArgs: '--parallel 8'
      Windows_4:
        Pool: azsdk-pool-mms-win-2019-general
        OSVmImage: MMS2019
        VcpkgInstall: 'curl[winssl]'
        VCPKG_DEFAULT_TRIPLET: 'x64-windows-static'
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: x64
        CMAKE_BUILD_TYPE: Release
        BuildArgs: '--parallel 8'
      Windows_5:
        Pool: azsdk-pool-mms-win-2019-general
        OSVmImage: MMS2019
        VcpkgInstall: 'curl[winssl]'
        VCPKG_DEFAULT_TRIPLET: 'x86-windows-static'
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: Win32
        CmakeArgs: ' -DBUILD_TESTING=ON -DBUILD_PERFORMANCE_TESTS=ON -DRUN_LONG_UNIT_TESTS=ON -DBUILD_TRANSPORT_CURL=ON -DBUILD_TRANSPORT_WINHTTP=ON'
        BuildArgs: '--parallel 8'
      Windows_6:
        Pool: azsdk-pool-mms-win-2019-general
        OSVmImage: MMS2019
        VCPKG_DEFAULT_TRIPLET: 'x64-windows-static'
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: x64
        CmakeArgs: ' -DBUILD_TESTING=ON -DBUILD_PERFORMANCE_TESTS=ON -DRUN_LONG_UNIT_TESTS=ON -DBUILD_TRANSPORT_CURL=ON -DBUILD_TRANSPORT_WINHTTP=ON'
        BuildArgs: '--parallel 8'

      Windows_7:
        Pool: azsdk-pool-mms-win-2019-general
        OSVmImage: MMS2019
        VcpkgInstall: 'curl[winssl]'
        VCPKG_DEFAULT_TRIPLET: 'arm64-windows'
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: arm64
        CmakeArgs: ' -DBUILD_TRANSPORT_CURL=ON -DBUILD_TRANSPORT_WINHTTP=ON'
        BuildArgs: '--parallel 8'
      Windows_8:
        Pool: azsdk-pool-mms-win-2019-general
        OSVmImage: MMS2019
        VcpkgInstall: 'curl[winssl]'
        VCPKG_DEFAULT_TRIPLET: 'arm64-windows'
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: arm64
        CMAKE_BUILD_TYPE: Release
        CmakeArgs: ' -DBUILD_TRANSPORT_CURL=ON -DBUILD_TRANSPORT_WINHTTP=ON'
        BuildArgs: '--parallel 8'

      Windows_9:
        Pool: azsdk-pool-mms-win-2019-general
        OSVmImage: MMS2019
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: arm64
        CMAKE_SYSTEM_NAME: WindowsStore
        CMAKE_SYSTEM_VERSION: 10.0
        # curl does not compile on arm64-uwp
        CmakeArgs: ' -DBUILD_TRANSPORT_WINHTTP=ON'
        BuildArgs: '--parallel 8'
      Windows_10:
        Pool: azsdk-pool-mms-win-2019-general
        OSVmImage: MMS2019
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: arm64
        CMAKE_SYSTEM_NAME: WindowsStore
        CMAKE_SYSTEM_VERSION: 10.0
        CMAKE_BUILD_TYPE: Release
        # curl does not compile on arm64-uwp
        CmakeArgs: ' -DBUILD_TRANSPORT_WINHTTP=ON'
        BuildArgs: '--parallel 8'

      Windows_11:
        Pool: azsdk-pool-mms-win-2019-general
        OSVmImage: MMS2019
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: x64
        CMAKE_SYSTEM_NAME: 'WindowsStore'
        CMAKE_SYSTEM_VERSION: '10.0'
        # curl does not compile on arm64-uwp
        CmakeArgs: ' -DBUILD_TRANSPORT_WINHTTP=ON -DBUILD_TESTING=ON -DBUILD_PERFORMANCE_TESTS=ON -DRUN_LONG_UNIT_TESTS=ON'
        BuildArgs: '--parallel 8'
      Windows_12:
        Pool: azsdk-pool-mms-win-2019-general
        OSVmImage: MMS2019
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: x64
        CMAKE_SYSTEM_NAME: 'WindowsStore'
        CMAKE_SYSTEM_VERSION: '10.0'
        CMAKE_BUILD_TYPE: Release
        # curl does not compile on arm64-uwp
        CmakeArgs: ' -DBUILD_TRANSPORT_WINHTTP=ON'
        BuildArgs: '--parallel 8'

      Windows_13:
        Pool: azsdk-pool-mms-win-2019-general
        OSVmImage: MMS2019
        BuildConfigurations:
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: Win32
        CMAKE_SYSTEM_NAME: 'WindowsStore'
        CMAKE_SYSTEM_VERSION: '10.0'
        # curl does not compile on arm64-uwp
        CmakeArgs: ' -DBUILD_TRANSPORT_WINHTTP=ON -DBUILD_TESTING=ON -DBUILD_PERFORMANCE_TESTS=ON -DRUN_LONG_UNIT_TESTS=ON'
        BuildArgs: '--parallel 8'
      Windows_14:
        Pool: azsdk-pool-mms-win-2019-general
        OSVmImage: MMS2019
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: Win32
        CMAKE_SYSTEM_NAME: 'WindowsStore'
        CMAKE_SYSTEM_VERSION: '10.0'
        CMAKE_BUILD_TYPE: Release
        # curl does not compile on arm64-uwp
        CmakeArgs: ' -DBUILD_TRANSPORT_WINHTTP=ON'
        BuildArgs: '--parallel 8'

      MacOS1014_1:
        Pool: Azure Pipelines
        OsVmImage: macOS-10.14
        VcpkgInstall: 'curl[ssl] libxml2 openssl'
        VCPKG_DEFAULT_TRIPLET: 'x64-osx'
        CmakeArgs: ' -DBUILD_TESTING=ON -DBUILD_PERFORMANCE_TESTS=ON -DRUN_LONG_UNIT_TESTS=ON -DBUILD_TRANSPORT_CURL=ON'
        BuildArgs: '-j 4'
      MacOS1014_2:
        Pool: Azure Pipelines
        OsVmImage: macOS-10.14
        VcpkgInstall: 'curl[ssl] libxml2 openssl'
        VCPKG_DEFAULT_TRIPLET: 'x64-osx'
        CMAKE_BUILD_TYPE: Release
        CmakeArgs: ' -DBUILD_TRANSPORT_CURL=ON'
        BuildArgs: '-j 4'

      MacOS1015_1:
        Pool: Azure Pipelines
        OsVmImage: macOS-10.15
        VcpkgInstall: 'curl[ssl] libxml2 openssl'
        VCPKG_DEFAULT_TRIPLET: 'x64-osx'
        CmakeArgs: ' -DBUILD_TESTING=ON -DBUILD_PERFORMANCE_TESTS=ON -DRUN_LONG_UNIT_TESTS=ON -DBUILD_TRANSPORT_CURL=ON'
        BuildArgs: '-j 4'

      MacOS11_1:
        Pool: Azure Pipelines
        OsVmImage: macOS-11
        VcpkgInstall: 'curl[ssl] libxml2 openssl'
        VCPKG_DEFAULT_TRIPLET: 'x64-osx'
        CmakeArgs: ' -DBUILD_TESTING=ON -DBUILD_PERFORMANCE_TESTS=ON -DRUN_LONG_UNIT_TESTS=ON -DBUILD_TRANSPORT_CURL=ON'
        BuildArgs: '-j 4'
      MacOS11_2:
        Pool: Azure Pipelines
        OsVmImage: macOS-11
        VcpkgInstall: 'curl[ssl] libxml2 openssl'
        VCPKG_DEFAULT_TRIPLET: 'x64-osx'
        CMAKE_BUILD_TYPE: Release
        CmakeArgs: ' -DBUILD_TRANSPORT_CURL=ON'
        BuildArgs: '-j 4'


jobs:
  - job: Validate_${{ machine.Key }}
    condition: and(succeededOrFailed(), ne(variables['Skip.Test'], 'true'))
    strategy:
      matrix: ${{ parameters.Matrix }}
      maxParallel: 10
    pool:
      name: $(Pool)
      vmImage: $(OsVmImage)

    variables:
    - name: CMOCKA_XML_FILE
      value: "%g-test-results.xml"
    - name: CMOCKA_MESSAGE_OUTPUT
      value: "xml"
    - name: BuildArgs
      value: ""
    - name: CmakeEnvArg
      value: ""
    - name: CmakeArgs
      value: ""
    - name: AZURE_TEST_MODE
      value: "PLAYBACK"

    steps:
      - template: /eng/common/pipelines/templates/steps/verify-agent-os.yml
        parameters:
          AgentImage: $(OsVmImage)

      - pwsh: |
          $TargetPath = "$(Agent.TempDirectory)/vcpkg"
          Remove-Item -Path $TargetPath -Recurse -Force -ErrorAction Ignore
          New-Item -ItemType Directory -Path $TargetPath  -Force

          $VcpkgCommit = $(Get-Content eng/vcpkg-commit.txt)
          Write-Host "Target Path for vcpkg: $TargetPath"
          Write-Host "Vcpkg SHA: $VcpkgCommit"

          Write-Host "##vso[task.prependpath]$TargetPath"
          Write-Host "##vso[task.setvariable variable=VCPKG_INSTALLATION_ROOT]$TargetPath"
          Write-Host "##vso[task.setvariable variable=VcpkgCommit]$VcpkgCommit"
        displayName: Set Vcpkg Variables

      - task: Cache@2
        inputs:
          key: >-
            $(Agent.JobName)
            | "$(VcpkgCommit)"
            | $(Agent.Os)
          path: $(VCPKG_INSTALLATION_ROOT)
          cacheHitVar: VcpkgRestoredFromCache
        displayName: Vcpkg Cache
        timeoutInMinutes: 10
        condition: >-
          and(
            succeeded(),
            not(eq(variables['Skip.VcpkgCache'], 'true'))
          )

      - pwsh: |
          $TargetPath = "$(Agent.TempDirectory)/vcpkg"
          Remove-Item -Path $TargetPath -Recurse -Force -ErrorAction Ignore
          New-Item -ItemType Directory -Path $TargetPath  -Force

          git clone https://github.com/Microsoft/vcpkg $TargetPath
          Set-Location $TargetPath
          git fetch --tags
          git checkout $(Get-Content $(Build.SourcesDirectory)/eng/vcpkg-commit.txt)

          if ($IsWindows) {
              .\bootstrap-vcpkg.bat
          } else {
              ./bootstrap-vcpkg.sh
          }
        displayName: Setup vcpkg
        condition: >-
          and(
            succeeded(),
            ne(variables['VcpkgRestoredFromCache'], true)
          )

      - pwsh: sudo apt update && sudo apt install -y $(AptDependencies)
        condition: and(succeeded(), ne(variables['AptDependencies'], ''))
        displayName: Install dependencies from apt

      - pwsh: |
          if ($IsWindows) {
            .\vcpkg.exe install $(VcpkgInstall)
          } else {
            ./vcpkg install $(VcpkgInstall)
          }
        workingDirectory: $(VCPKG_INSTALLATION_ROOT)
        condition: and(succeeded(), ne(variables['VcpkgInstall'], ''))
        displayName: vcpkg install

      - template: /eng/pipelines/templates/steps/ci.yml
        parameters:
          Artifacts: ${{ parameters.Artifacts }}
          ServiceDirectory: ${{ parameters.ServiceDirectory }}
          TestPipeline: ${{ parameters.TestPipeline }}
          CtestRegex: ${{ parameters.CtestRegex }}
          CoverageReportPath: ${{ parameters.CoverageReportPath }}
          CoverageEnabled: ${{ parameters.CoverageEnabled }}
          DisplayNameDecorator: ''

      # - pwsh: |
      #     git clean -xdf
      #     Remove-Item build -Recurse -Force -ErrorAction Ignore
      #     Get-ChildItem -Path build -Recurse -ErrorAction Ignore
      #   displayName: Between-build cleanup - ${{ configuration.Key }}

        # - template: /eng/common/pipelines/templates/steps/devops-variables-clear.yml
        #   parameters:
        #     Variables: ${{ configuration.Value.EnvVars }}

  # Disable build for cpp - client
  - ${{ if ne(parameters.ServiceDirectory, 'not-specified' )}}:
    - job: GenerateReleaseArtifacts
      pool:
        name: azsdk-pool-mms-win-2019-general
        vmImage: MMS2019
      variables:
        VcpkgDependencies: curl[winssl] libxml2
        VCPKG_DEFAULT_TRIPLET: 'x64-windows-static'
      steps:
        - template: /eng/common/pipelines/templates/steps/check-spelling.yml
          parameters:
            ContinueOnError: false

        - template: /eng/common/pipelines/templates/steps/verify-links.yml
          parameters:
            Directory: ''
            CheckLinkGuidance: $true

        - ${{ each artifact in parameters.Artifacts }}: 
          - template: /eng/common/pipelines/templates/steps/set-test-pipeline-version.yml
            parameters:
              PackageName: ${{ artifact.Name }}
              ServiceDirectory: ${{ parameters.ServiceDirectory }}
              TestPipeline: ${{ parameters.TestPipeline }}

        - pwsh: |
            $setupFile="doxygen-1.8.18-setup.exe";

            Invoke-WebRequest `
              -MaximumRetryCount 10 `
              -Uri "https://azuresdktooling.blob.core.windows.net/dependencies/$setupFile" `
              -OutFile $setupFile `
            | Wait-Process;

            Start-Process -Filepath .\$setupFile -ArgumentList @("/VERYSILENT") -Wait
          workingDirectory: $(Agent.TempDirectory)
          displayName: Download and Install Doxygen

        # Install dependencies required for build from vcpkg
        # TODO: We should be able to generate docs without having to install these
        # prerequisites:
        - template: /eng/pipelines/templates/steps/vcpkg.yml
          parameters:
            DependenciesVariableName: VcpkgDependencies

        - template: /eng/pipelines/templates/steps/cmake-build.yml
          parameters:
            Build: false
            GenerateArgs: >-
              -DINSTALL_GTEST=OFF
              -DBUILD_TESTING=OFF
              -DBUILD_TRANSPORT_CURL=OFF
              -DBUILD_DOCUMENTATION=YES

        - pwsh: npm install -g moxygen
          displayName: Install Moxygen to generate markdown for docs.microsoft.com

        # Generate package spec JSON files for tagging the repo
        - ${{ each artifact in parameters.Artifacts }}:
            - pwsh: >-
                New-Item
                -ItemType directory
                -Path $(Build.ArtifactStagingDirectory)
                -Name packages/${{ artifact.Name }}
              displayName: Create package info artifact location

            - pwsh: |
                $outputPath = Join-Path -Path $(Build.ArtifactStagingDirectory) packages/${{ artifact.Name }}/package-info.json

                $version = eng/scripts/Get-PkgVersion -ServiceDirectory ${{ parameters.ServiceDirectory }} -PackageName ${{ artifact.Path }}
                $outputObject = @{ version = $version.ToString(); name = '${{ artifact.Name }}'; packageName = "${{ artifact.Name }}_$version"; } | ConvertTo-Json

                Set-Content -Path $outputPath -Value $outputObject

                # Set AZURE_SDK_VERSION for use in Doxygen generation
                Write-Host "##vso[task.setvariable variable=AZURE_SDK_VERSION]$version"
              displayName: Create package info JSON file

            - task: Powershell@2
              inputs:
                targetType: inline
                script: |
                  # If there is no vcpkg directory skip staging the vcpkg port artifacts
                  if (!(Test-Path build/vcpkg/ports/${{ artifact.VcpkgPortName }})) {
                    Write-Host "No vcpkg port directory at build/vcpkg/ports/${{ artifact.VcpkgPortName }}"
                    exit
                  }

                  New-Item `
                    -ItemType Directory `
                    $(Build.ArtifactStagingDirectory)/packages/${{ artifact.Name }}/vcpkg -Force

                  Copy-Item -Recurse `
                    build/vcpkg/ports/${{ artifact.VcpkgPortName }}/. `
                    $(Build.ArtifactStagingDirectory)/packages/${{ artifact.Name }}/vcpkg/port 
                pwsh: true
              displayName: Copy vcpkg port files from build

            - pwsh: |
                $outputPath = Join-Path -Path $(Build.ArtifactStagingDirectory) packages/${{ artifact.Name }}
                $changelogPath = "sdk/${{ parameters.ServiceDirectory }}/${{ artifact.Path }}/CHANGELOG.md"

                if (Test-Path $changeLogPath) {
                  Copy-Item sdk/${{ parameters.ServiceDirectory }}/${{ artifact.Path }}/CHANGELOG.md $outputPath
                } else {
                  Write-Warning "$changeLogPath does not exist"
                }
              displayName: Copy CHANGELOG.md to package artifact

            - script: cmake --build . --target ${{ artifact.Name }}-docs
              workingDirectory: build
              displayName: Generate docs (${{ artifact.Name }}-docs)

            - task: PowerShell@2
              inputs:
                targetType: filePath
                filePath: eng/scripts/New-DocsMsArtifact.ps1
                arguments: >-
                  -ServiceDirectory ${{ parameters.ServiceDirectory }}
                  -PackageName ${{ artifact.Name }}
                  -TargetFolder $(Build.ArtifactStagingDirectory)/packages/${{ artifact.Name }}/docs/docs.ms
                ignoreLASTEXITCODE: true
                pwsh: true
              displayName: Generate artifacts for docs.ms

            - pwsh: |
                New-Item -ItemType directory -Path $(Build.ArtifactStagingDirectory) -Name docs/${{ artifact.Name }}
              displayName: Create doc artifact location

            - task: CopyFiles@2
              inputs:
                sourceFolder: $(Build.ArtifactStagingDirectory)/packages/${{ artifact.Name }}
                contents: package-info.json
                targetFolder: build/sdk/${{ parameters.ServiceDirectory }}/${{ artifact.Path }}/docs/html
              displayName: Copy package-info.json to documentation path

            - task: CopyFiles@2
              inputs:
                sourceFolder: build/sdk/${{ parameters.ServiceDirectory }}/${{ artifact.Path }}/docs/html
                targetFolder: $(Build.ArtifactStagingDirectory)/docs/${{ artifact.Name }}
              displayName: Copy documentation to artifact staging directory

        - task: PublishPipelineArtifact@1
          inputs:
            artifactName: packages
            path: $(Build.ArtifactStagingDirectory)/packages

        # After all docs artifacts are generated publish docs artifacts
        - task: PublishPipelineArtifact@1
          inputs:
            artifactName: docs
            path: $(Build.ArtifactStagingDirectory)/docs

        - template: /eng/common/pipelines/templates/steps/eng-common-workflow-enforcer.yml
