parameters:
  - name: Artifacts
    type: object
    default: []
  - name: ServiceDirectory
    type: string
    default: not-specified
  - name: TestPipeline
    type: boolean
    default: false
  - name: CtestRegex
    type: string
    default: .*
  - name: CoverageReportPath
    type: string
    default: 'sdk/*/*/*cov_xml.xml'

steps:
  - checkout: self
    submodules: recursive

  - template: /eng/common/pipelines/templates/steps/verify-agent-os.yml
    parameters:
      AgentImage: $(OSVmImage)

  # Add g++5 repo to ubuntu
  - bash: sudo sh -c "echo 'deb http://ftp.debian.org/debian/ stretch main' >> /etc/apt/sources.list"
    displayName: Add g++ 5
    condition: >-
      and(
        succeeded(),
        contains(variables['OSVmImage'], 'Ubuntu'), 
        contains(variables['CmakeEnvArg'], 'CC=/usr/bin/gcc-5 CXX=/usr/bin/g++-5 cmake')
      )

  # Install g++5
  - bash: sudo apt-get update & sudo apt-get install g++-5
    displayName: Install g++ 5
    condition: >-
      and(
        succeeded(), 
        contains(variables['OSVmImage'], 'Ubuntu'),
        contains(variables['CmakeEnvArg'], 'CC=/usr/bin/gcc-5 CXX=/usr/bin/g++-5 cmake')
      )

  # Install gcc and g++ 8 if it is needed on the image.
  - bash: sudo apt-get install gcc-8 g++-8 -y
    displayName: Install gcc and g++ 8
    condition: >-
      and(
        succeeded(),
        contains(variables['OSVmImage'], 'Ubuntu'), 
        contains(variables['CC'], 'gcc-8'),
        contains(variables['CXX'], 'g++-8')
      )

  # Validate all the files are formatted correctly according to the
  # .clang-format file. This step runs on linux only only and assumes that
  # clang-format-11 is installed.
  - bash: |
      # Run clang-format recursively on each source and header file within the repo sdk folder.
      echo "Check clang-formatting"
      clang-format --version
      find ./sdk \( -iname '*.hpp' -o -iname '*.cpp' \) ! -iname 'json.hpp' -exec clang-format -i {} \;

      if [[ `git status | grep modified | awk '{print $2}'` ]]; then
        echo Some files were not formatted correctly according to the .clang-format file.
        echo Please run clang-format version 10 or greater to fix the issue by using this bash command at the root of the repo:
        echo "find ./sdk \( -iname '*.hpp' -o -iname '*.cpp' \) ! -iname 'json.hpp' -exec clang-format -i {} \;"
        echo ""
        echo "List of files not formatted correctly:"
        git status | grep modified | awk '{print $2}'
        exit 1
      fi

      echo Success, all files are formatted correctly according to the .clang-format file.
      exit 0

    displayName: Validate Clang Format
    condition: and(succeededOrFailed(), eq(variables['CHECK_CLANG_FORMAT'], 1))

  - ${{ each artifact in parameters.Artifacts }}:
    - template: /eng/common/pipelines/templates/steps/set-test-pipeline-version.yml
      parameters:
        PackageName: ${{ artifact.Name }}
        ServiceDirectory: ${{ parameters.ServiceDirectory }}
        TestPipeline: ${{ parameters.TestPipeline }}

  # Install apt dependencies (if appropriate)
  - bash: sudo apt install -y $(AptDependencies)
    condition: and(succeededOrFailed(), ne(variables['AptDependencies'], ''))
    displayName: Install dependencies from apt

  - template: /eng/pipelines/templates/steps/vcpkg.yml
    parameters:
      DependenciesVariableName: VcpkgInstall

  - script: |
      dotnet tool install -g dotnet-reportgenerator-globaltool
      dotnet tool install dotnet-reportgenerator-globaltool --tool-path tools
    displayName: Install coverage tools
    # CODE_COVERAGE variable is '' (do-not-generate) in all matrix but linux-gcc
    # It is 'enabled' by default on linux-gcc but it can be opt-out by each pipeline (disabled)
    condition: and(succeededOrFailed(), ne(variables['CODE_COVERAGE'], 'disabled'), ne(variables['CODE_COVERAGE'], ''))

  - template: /eng/pipelines/templates/steps/cmake-build.yml
    parameters:
      GenerateArgs: "$(CmakeArgs)"
      BuildArgs: "$(BuildArgs)"
      Env: "$(CmakeEnvArg)"

  - script: ctest -C Debug -V --tests-regex ${{ parameters.CtestRegex }}
    workingDirectory: build
    displayName: ctest

  # Make coverage targets (specified in coverage_targets.txt) and assemble
  # coverage report
  - bash: |
      make `cat ${{ parameters.ServiceDirectory }}-targets-coverage.txt`
      ../tools/reportgenerator "-reports:${{ parameters.CoverageReportPath }}" "-targetdir:." "-reporttypes:Cobertura"
    workingDirectory: build
    displayName: Generate Code Coverage Data
    condition: and(succeededOrFailed(), ne(variables['CODE_COVERAGE'], 'disabled'), ne(variables['CODE_COVERAGE'], ''))

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Build.SourcesDirectory)/**/Cobertura.xml'
    displayName: Publish Code Coverage to DevOps
    condition: and(succeededOrFailed(), ne(variables['CODE_COVERAGE'], 'disabled'), ne(variables['CODE_COVERAGE'], ''))
