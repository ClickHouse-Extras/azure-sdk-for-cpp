parameters:
  - name: Artifacts
    type: object
    default: []
  - name: ServiceDirectory
    type: string
    default: not-specified
  - name: TestPipeline
    type: boolean
    default: false
  - name: CtestRegex
    type: string
    default: .*
  - name: CoverageReportPath
    type: string
    default: 'sdk/*/*/*cov_xml.xml'
  - name: CoverageEnabled
    type: boolean
    default: true

steps:
  # Validate all the files are formatted correctly according to the
  # .clang-format file. This step runs on linux only only and assumes that
  # clang-format-11 is installed.
  - bash: |
      # Run clang-format recursively on each source and header file within the repo sdk folder.
      echo "Check clang-formatting"
      clang-format --version
      find ./sdk \( -iname '*.hpp' -o -iname '*.cpp' \) ! -iname 'json.hpp' -exec clang-format -i {} \;

      if [[ `git status | grep modified | awk '{print $2}'` ]]; then
        echo Some files were not formatted correctly according to the .clang-format file.
        echo Please run clang-format version 10 or greater to fix the issue by using this bash command at the root of the repo:
        echo "find ./sdk \( -iname '*.hpp' -o -iname '*.cpp' \) ! -iname 'json.hpp' -exec clang-format -i {} \;"
        echo ""
        echo "List of files not formatted correctly:"
        git status | grep modified | awk '{print $2}'
        exit 1
      fi

      echo Success, all files are formatted correctly according to the .clang-format file.
      exit 0

    displayName: Validate Clang Format
    condition: and(succeededOrFailed(), eq(variables['CHECK_CLANG_FORMAT'], 1))

  - ${{ each artifact in parameters.Artifacts }}:
    - template: /eng/common/pipelines/templates/steps/set-test-pipeline-version.yml
      parameters:
        PackageName: ${{ artifact.Name }}
        ServiceDirectory: ${{ parameters.ServiceDirectory }}
        TestPipeline: ${{ parameters.TestPipeline }}

  - template: /eng/pipelines/templates/steps/vcpkg.yml
    parameters:
      DependenciesVariableName: VcpkgInstall

  - template: /eng/pipelines/templates/steps/cmake-build.yml
    parameters:
      GenerateArgs: "$(CmakeArgs)"
      BuildArgs: "$(BuildArgs)"
      Env: "$(CmakeEnvArg)"

  - script: ctest -C Debug -V --tests-regex ${{ parameters.CtestRegex }}
    workingDirectory: build
    displayName: ctest

  - ${{ if eq(parameters.CoverageEnabled, true) }}:
    # Make coverage targets (specified in coverage_targets.txt) and assemble
    # coverage report
    - bash: |
        ls *.txt
        echo "cat ${{ parameters.ServiceDirectory }}-targets-coverage.txt"
        cat ${{ parameters.ServiceDirectory }}-targets-coverage.txt
        echo "=============="
        cat Makefile
        echo "=============="

        make `cat ${{ parameters.ServiceDirectory }}-targets-coverage.txt`
        ../tools/reportgenerator "-reports:${{ parameters.CoverageReportPath }}" "-targetdir:." "-reporttypes:Cobertura"
      workingDirectory: build
      displayName: Generate Code Coverage Data
      condition: and(succeededOrFailed(), ne(variables['CODE_COVERAGE'], ''))

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(Build.SourcesDirectory)/**/Cobertura.xml'
      displayName: Publish Code Coverage to DevOps
      condition: and(succeededOrFailed(), ne(variables['CODE_COVERAGE'], ''))
